name: Build SuperHaxagon

on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
    paths:
      - .github/workflows/build-super-haxagon.yml
      - source/**
      - cmake/**
      - CMakeLists.txt
      - CMakeSettings.json
      - net.awalter.SuperHaxagon.yml
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - .github/workflows/build-super-haxagon.yml
      - source/**
      - cmake/**
      - CMakeLists.txt
      - CMakeSettings.json
      - net.awalter.SuperHaxagon.yml

env:
  REPO: ghcr.io/${{ github.repository }}

jobs:
  # First, try and build the Null driver before spending time with the more expensive runners (like macOS)
#  build-test:
#    name: Test Compile
#    runs-on: ubuntu-latest
#    container:
#      image: ghcr.io/redtopper/super-haxagon/null:latest
#      options: --user root
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Build
#        run: |
#          mkdir -p artifacts/build artifacts/install
#          cd artifacts/build
#          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install" ../../tools/null/build.sh
#
#      - name: Upload
#        uses: actions/upload-artifact@v4
#        with:
#          name: SuperHaxagon-LinuxNull-x64-no-romfs
#          path: artifacts/install

  # Matrix of special platforms SuperHaxagon supports
#  build-with-containers:
#    name: Build ${{ matrix.containers.artifact }}
#    runs-on: ${{ matrix.containers.os }}
#    needs: build-test
#    strategy:
#      matrix:
#        containers:
#          - build: '3ds'
#            artifact: 3DS-arm
#            container: ghcr.io/redtopper/super-haxagon/3ds:latest
#            os: ubuntu-latest
#
#          - build: 'linux'
#            container: ghcr.io/redtopper/super-haxagon/linux:latest
#            artifact: LinuxSFML-x64
#            os: ubuntu-latest
#            romfs: no
#
#          - build: 'linux-sdl2'
#            container: ghcr.io/redtopper/super-haxagon/linux-sdl2:latest
#            artifact: LinuxSDL2-x64
#            os: ubuntu-latest
#            romfs: no
#
#          - build: 'miyoo'
#            container: ghcr.io/redtopper/super-haxagon/miyoo:latest
#            artifact: MiyooMini-armhf
#            os: ubuntu-latest
#            romfs: no
#
#          - build: 'nspire'
#            container: ghcr.io/redtopper/super-haxagon/nspire:latest
#            artifact: Nspire-arm
#            os: ubuntu-latest
#            romfs: yes
#
#          - build: 'switch'
#            container: docker.io/devkitpro/devkita64:latest
#            artifact: Switch-arm
#            os: ubuntu-latest
#            romfs: yes
#
#          - build: 'portmaster'
#            container: docker.io/monkeyx/retro_builder:arm64
#            artifact: PortMaster-arm64-autoinstall
#            os: ubuntu-24.04-arm
#            romfs: yes
#
#    container:
#      image: ${{ matrix.containers.container }}
#      options: --user root
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Build SuperHaxagon
#        run: |
#          mkdir -p artifacts/build artifacts/install
#          cd artifacts/build
#          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install" ../../tools/${{ matrix.containers.build }}/build.sh
#
#      - name: Upload Artifact
#        if: matrix.containers.build != '3ds'
#        uses: actions/upload-artifact@v4
#        with:
#          name: SuperHaxagon-${{ matrix.containers.artifact }}${{ matrix.containers.romfs == 'no' && '-no-romfs' || '' }}
#          path: |
#            artifacts/install
#            ${{ matrix.containers.romfs == 'no' && '!artifacts/install/**/romfs/**' || '' }}
#
#        # Special uploads for 3DS
#      - name: Upload 3DS 3DSX
#        if: matrix.containers.build == '3ds'
#        uses: actions/upload-artifact@v4
#        with:
#          name: SuperHaxagon-${{ matrix.containers.artifact }}.3dsx
#          path: artifacts/install/SuperHaxagon.3dsx
#      - name: Upload 3DS CIA
#        if: matrix.containers.build == '3ds'
#        uses: actions/upload-artifact@v4
#        with:
#          name: SuperHaxagon-${{ matrix.containers.artifact }}.cia
#          path: artifacts/install/SuperHaxagon.cia

  # Builds SuperHaxagon natively (as in, without containers)
  build-native:
    name: Build ${{ matrix.platforms.artifact }}
    runs-on: ${{ matrix.platforms.os }}
#    needs: build-test
    strategy:
      matrix:
        platforms:
#          - artifact: LinuxSFML-arm64
#            os: ubuntu-24.04-arm
#            romfs: no
          - artifact: macOS-arm64
            os: macos-latest
            romfs: yes
#          - artifact: Windows-x64
#            os: windows-latest
#            romfs: no
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install SFML Dependencies
        if: matrix.platforms.os == 'ubuntu-24.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install  -y \
            libgl1-mesa-dev \
            libudev-dev \
            libopenal-dev \
            libvorbis-dev \
            libflac-dev \
            libx11-dev \
            libxrandr-dev \
            libx11-xcb-dev \
            libxcb-randr0-dev \
            libxcb-image0-dev \
            libxcursor-dev \
            libjpeg-dev \
            libfreetype-dev

      - name: Build SuperHaxagon
        run: |
          cmake -E make_directory build install
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install
          cmake --build build --config Release --target install --parallel 6

      - name: Sign binary
        uses: lando/code-sign-action@a5703d3b5486ada6e8efd08912110f8756e873e8 # v3.0.0
        with:
          file: install/SuperHaxagon-${{ matrix.platforms.artifact }}.tar
          certificate-data: ${{ secrets.APPLE_CERT_DATA }}
          certificate-id: ${{ secrets.APPLE_CERT_ID }}
          certificate-password: ${{ secrets.APPLE_CERT_PASSWORD }}

      - name: Tar Files
        run: |
          cd install
          tar -cvf SuperHaxagon-${{ matrix.platforms.artifact }}.tar "SuperHaxagon.app"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-${{ matrix.platforms.artifact }}${{ matrix.containers.romfs == 'no' && '-no-romfs' || '' }}
          path: |
            install/SuperHaxagon-${{ matrix.platforms.artifact }}.tar
  

  # Build flatpak repo
#  build-flatpak:
#    name: Build Flatpak
#    runs-on: ubuntu-latest
#    needs: build-test
#    container:
#      image: bilelmoussaoui/flatpak-github-actions:gnome-47
#      options: --privileged
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Build SuperHaxagon
#        uses: flatpak/flatpak-github-actions/flatpak-builder@fc80c13788c1ba0f45add99b19cf26b616ccab4f # v6.4
#        with:
#          bundle: net.awalter.SuperHaxagon.flatpak
#          manifest-path: net.awalter.SuperHaxagon.yml
#          upload-artifact: true

  # Finally, if all pipelines work, upload the current RomFS
#  upload-romfs:
#    name: Upload RomFS
#    runs-on: ubuntu-latest
#    needs:
#      - build-flatpak
#      - build-native
#      - build-with-containers
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Upload RomFS
#        uses: actions/upload-artifact@v4
#        with:
#          name: romfs
#          path: romfs
