name: Build SuperHaxagon

on:
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
    paths:
      - .github/workflows/build-super-haxagon.yml
      - source/**
      - driver/**
      - CMakeLists.txt
      - CMakeSettings.json
      - net.awalter.SuperHaxagon.yml
  pull_request:
    types:
      - opened
      - synchronize
    paths:
      - .github/workflows/build-super-haxagon.yml
      - source/**
      - driver/**
      - CMakeLists.txt
      - CMakeSettings.json
      - net.awalter.SuperHaxagon.yml

env:
  REPO: ghcr.io/${{ github.repository }}

jobs:
  # First, try and build the example driver before spending time with the more expensive runners (like macOS)
  build-test:
    name: Test Compile
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/redtopper/super-haxagon/example:latest
      options: --user root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build
        run: |
          mkdir -p artifacts/build artifacts/install
          cd artifacts/build
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install" ../../driver/Example/build.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-LinuxExample-x64-no-romfs
          path: artifacts/install

  # Matrix of special platforms SuperHaxagon supports
  build-with-containers:
    name: Build ${{ matrix.containers.artifact }}
    runs-on: ${{ matrix.containers.os }}
    needs: build-test
    strategy:
      matrix:
        containers:
          - build: 'N3DS'
            artifact: 3DS-arm
            container: ghcr.io/redtopper/super-haxagon/n3ds:latest
            cache: 'yes'
            romfs: 'yes'
            os: ubuntu-latest

          - build: 'Linux'
            container: ghcr.io/redtopper/super-haxagon/linux:latest
            artifact: LinuxSFML-x64
            cache: 'yes'
            os: ubuntu-latest

          - build: 'Linux-SDL2'
            container: ghcr.io/redtopper/super-haxagon/linux-sdl2:latest
            artifact: LinuxSDL2-x64
            os: ubuntu-latest

          - build: 'Miyoo'
            container: ghcr.io/redtopper/super-haxagon/miyoo:latest
            artifact: MiyooMini-armhf
            os: ubuntu-latest

          - build: 'Nspire'
            container: ghcr.io/redtopper/super-haxagon/nspire:latest
            artifact: Nspire-arm
            romfs: 'yes'
            os: ubuntu-latest

          - build: 'Switch'
            container: docker.io/devkitpro/devkita64:latest
            artifact: Switch-arm
            romfs: 'yes'
            os: ubuntu-latest

          - build: 'PortMaster'
            container: docker.io/monkeyx/retro_builder:arm64
            artifact: PortMaster-arm64-autoinstall
            romfs: 'yes'
            os: ubuntu-24.04-arm

    container:
      image: ${{ matrix.containers.container }}
      options: --user root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Deps
        if: matrix.containers.cache == 'yes'
        uses: actions/cache@v4
        with:
          path: artifacts/build/_deps
          key: deps-${{ matrix.containers.artifact }}-${{ hashFiles('.github/workflows/**', 'CMakeLists.txt', 'cmake/**') }}
          restore-keys: deps-${{ matrix.containers.artifact }}-

      - name: Build SuperHaxagon
        run: |
          mkdir -p artifacts/build artifacts/install
          cd artifacts/build
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install" ../../driver/${{ matrix.containers.build }}/build.sh

      - name: Upload Artifact
        if: matrix.containers.build != 'N3DS'
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-${{ matrix.containers.artifact }}${{ matrix.containers.romfs == 'yes' && '' || '-no-romfs' }}
          path: |
            artifacts/install
            ${{ matrix.containers.romfs == 'yes' && '' || '!artifacts/install/**/romfs/**' }}

        # Special uploads for 3DS
      - name: Upload 3DS 3DSX
        if: matrix.containers.build == 'N3DS'
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-${{ matrix.containers.artifact }}.3dsx
          path: artifacts/install/SuperHaxagon.3dsx
      - name: Upload 3DS CIA
        if: matrix.containers.build == 'N3DS'
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-${{ matrix.containers.artifact }}.cia
          path: artifacts/install/SuperHaxagon.cia

  # Builds SuperHaxagon natively (as in, without containers)
  build-native:
    name: Build ${{ matrix.platforms.artifact }}
    runs-on: ${{ matrix.platforms.os }}
    needs: build-test
    strategy:
      matrix:
        platforms:
          - artifact: LinuxSFML-arm64
            os: ubuntu-24.04-arm
          - artifact: macOSUnsignedUnix-arm64
            os: macos-latest
          - artifact: Windows-x64
            os: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Deps
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-${{ matrix.platforms.artifact }}-${{ hashFiles('.github/workflows/**', 'CMakeLists.txt', 'cmake/**') }}
          restore-keys: deps-${{ matrix.platforms.artifact }}-

      - name: Install SFML Dependencies (ubuntu)
        if: matrix.platforms.os == 'ubuntu-24.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install  -y \
            libgl1-mesa-dev \
            libudev-dev \
            libopenal-dev \
            libvorbis-dev \
            libflac-dev \
            libx11-dev \
            libxrandr-dev \
            libx11-xcb-dev \
            libxcb-randr0-dev \
            libxcb-image0-dev \
            libxcursor-dev \
            libjpeg-dev \
            libfreetype-dev

      - name: Install SFML Dependencies (macOS)
        if: matrix.platforms.os == 'macos-latest'
        run: |
          brew install openal-soft
          brew install sfml@2

      - name: Build SuperHaxagon
        run: |
          cmake -E make_directory build install
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_FIND_FRAMEWORK=LAST
          cmake --build build --config Release --target install --parallel 6

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-${{ matrix.platforms.artifact }}-no-romfs
          path: |
            install
            !install/**/romfs/**

  build-macos-bundle:
    name: Build macOS Bundle
    if: contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    runs-on: macos-latest
    needs: build-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Deps
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: deps-SuperHaxagon-macOS-arm-${{ hashFiles('.github/workflows/**', 'CMakeLists.txt', 'cmake/**') }}
          restore-keys: deps-SuperHaxagon-macOS-arm-

      - name: Build SuperHaxagon
        run: |
          cmake -E make_directory build install
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_BUNDLE=TRUE
          cmake --build build --config Release --target install --parallel 6

        # See: https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
      - name: Codesign App Bundle
        env:
          MACOS_CERTIFICATE: ${{ secrets.APPLE_CERT_DATA }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_CERT_PASSWORD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.APPLE_CERT_ID }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.APPLE_CERT_KEYCHAIN_PASSWORD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          /usr/bin/codesign --deep --force -s "$MACOS_CERTIFICATE_NAME" --options runtime install/SuperHaxagon.app -v

          cd install
          tar -cvf SuperHaxagon.app.tar *

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SuperHaxagon-macOS-arm.tar
          path: install/SuperHaxagon.app.tar

  # Build flatpak repo
  build-flatpak:
    name: Build Flatpak
    runs-on: ubuntu-latest
    needs: build-test
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-47
      options: --privileged
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build SuperHaxagon
        uses: flatpak/flatpak-github-actions/flatpak-builder@fc80c13788c1ba0f45add99b19cf26b616ccab4f # v6.4
        with:
          bundle: net.awalter.SuperHaxagon.flatpak
          manifest-path: net.awalter.SuperHaxagon.yml
          upload-artifact: true

  # Finally, if all pipelines work, upload the current RomFS
  upload-romfs:
    name: Upload RomFS
    runs-on: ubuntu-latest
    needs:
      - build-flatpak
      - build-native
      - build-with-containers
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Upload RomFS
        uses: actions/upload-artifact@v4
        with:
          name: romfs
          path: romfs
