version: '3.8'

# For a build:
# podman-compose up --build <service>
# ex:
# podman-compose up --build miyoo

# For a shell:
# podman-compose run --build --rm <service> bash
# Then you can run:
# build.sh
# in the current directory to start building the project.

# For a linux flatpak build, install Flatpak on your host
# and run tools/linux/flatpak.sh from the root of this repo

services:
  3ds:
    build:
      dockerfile: 3ds/Containerfile
    image: super-haxagon-3ds
    container_name: super-haxagon-3ds
    hostname: super-haxagon-3ds
    command: build.sh
    working_dir: /root/git/build/3ds
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/3ds -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./3ds/build.sh:/usr/local/bin/build.sh
  switch:
    image: devkitpro/devkita64
    container_name: super-haxagon-switch
    hostname: super-haxagon-switch
    command: build.sh
    working_dir: /root/git/build/switch
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/switch -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./switch/build.sh:/usr/local/bin/build.sh
  nspire:
    build:
      dockerfile: nspire/Containerfile
    image: super-haxagon-nspire
    container_name: super-haxagon-nspire
    hostname: super-haxagon-nspire
    command: build.sh
    working_dir: /root/git/build/nspire
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/nspire -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./nspire/build.sh:/usr/local/bin/build.sh
  linux:
    build:
      dockerfile: linux/Containerfile
    image: super-haxagon-linux
    container_name: super-haxagon-linux
    hostname: super-haxagon-linux
    command: build.sh
    working_dir: /root/git/build/linux-sfml
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/linux-sfml -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./linux/build.sh:/usr/local/bin/build.sh
  linux-sdl2:
    build:
      dockerfile: linux-sdl2/Containerfile
    image: super-haxagon-linux-sdl2
    container_name: super-haxagon-linux-sdl2
    hostname: super-haxagon-linux-sdl2
    command: build.sh
    working_dir: /root/git/build/linux-sdl2
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/linux-sdl2 -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./linux-sdl2/build.sh:/usr/local/bin/build.sh
  nothing:
    # Example driver and build tooling
    build:
      dockerfile: null/Containerfile
    image: super-haxagon-null
    container_name: super-haxagon-null
    hostname: super-haxagon-null
    command: build.sh
    working_dir: /root/git/build/null
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/null -DCMAKE_BUILD_TYPE=Debug"
    volumes:
      - ../:/root/git:z
      - ./null/build.sh:/usr/local/bin/build.sh
  portmaster:
    image: monkeyx/retro_builder:arm64
    container_name: super-haxagon-portmaster
    hostname: super-haxagon-portmaster
    command: build.sh
    working_dir: /root/git/build/portmaster
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/portmaster -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./portmaster/build.sh:/usr/local/bin/build.sh
  miyoo:
    build:
      context: .
      dockerfile: miyoo/Containerfile
    image: super-haxagon-miyoo
    container_name: super-haxagon-miyoo
    hostname: super-haxagon-miyoo
    command: build.sh
    working_dir: /root/git/build/miyoo
    environment:
      - "CMAKE_ARGS=-DCMAKE_INSTALL_PREFIX=/root/git/release/miyoo -DCMAKE_BUILD_TYPE=Release"
    volumes:
      - ../:/root/git:z
      - ./miyoo/build.sh:/usr/local/bin/build.sh
